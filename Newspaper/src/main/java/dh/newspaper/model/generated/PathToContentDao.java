package dh.newspaper.model.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dh.newspaper.model.generated.PathToContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PATH_TO_CONTENT.
*/
public class PathToContentDao extends AbstractDao<PathToContent, Long> {

    public static final String TABLENAME = "PATH_TO_CONTENT";

    /**
     * Properties of entity PathToContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UrlPattern = new Property(1, String.class, "urlPattern", false, "URL_PATTERN");
        public final static Property Xpath = new Property(2, String.class, "xpath", false, "XPATH");
        public final static Property Language = new Property(3, String.class, "language", false, "LANGUAGE");
        public final static Property Enable = new Property(4, Boolean.class, "enable", false, "ENABLE");
        public final static Property LastUpdate = new Property(5, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
    };


    public PathToContentDao(DaoConfig config) {
        super(config);
    }
    
    public PathToContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PATH_TO_CONTENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'URL_PATTERN' TEXT NOT NULL UNIQUE ," + // 1: urlPattern
                "'XPATH' TEXT," + // 2: xpath
                "'LANGUAGE' TEXT," + // 3: language
                "'ENABLE' INTEGER," + // 4: enable
                "'LAST_UPDATE' INTEGER);"); // 5: lastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PATH_TO_CONTENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PathToContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrlPattern());
 
        String xpath = entity.getXpath();
        if (xpath != null) {
            stmt.bindString(3, xpath);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(4, language);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(5, enable ? 1l: 0l);
        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(6, lastUpdate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PathToContent readEntity(Cursor cursor, int offset) {
        PathToContent entity = new PathToContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // urlPattern
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xpath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // language
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // enable
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // lastUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PathToContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrlPattern(cursor.getString(offset + 1));
        entity.setXpath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLanguage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnable(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setLastUpdate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PathToContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PathToContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
