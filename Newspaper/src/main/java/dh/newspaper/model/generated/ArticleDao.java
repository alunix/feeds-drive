package dh.newspaper.model.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dh.newspaper.model.generated.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleUrl = new Property(1, String.class, "articleUrl", false, "ARTICLE_URL");
        public final static Property ParentUrl = new Property(2, String.class, "parentUrl", false, "PARENT_URL");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Excerpt = new Property(6, String.class, "excerpt", false, "EXCERPT");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Language = new Property(8, String.class, "language", false, "LANGUAGE");
        public final static Property Published = new Property(9, java.util.Date.class, "published", false, "PUBLISHED");
        public final static Property Archived = new Property(10, java.util.Date.class, "archived", false, "ARCHIVED");
        public final static Property LastRead = new Property(11, java.util.Date.class, "lastRead", false, "LAST_READ");
        public final static Property LastUpdated = new Property(12, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    };

    private DaoSession daoSession;


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ARTICLE_URL' TEXT NOT NULL UNIQUE ," + // 1: articleUrl
                "'PARENT_URL' TEXT," + // 2: parentUrl
                "'IMAGE_URL' TEXT," + // 3: imageUrl
                "'TITLE' TEXT NOT NULL ," + // 4: title
                "'AUTHOR' TEXT," + // 5: author
                "'EXCERPT' TEXT NOT NULL ," + // 6: excerpt
                "'CONTENT' TEXT," + // 7: content
                "'LANGUAGE' TEXT," + // 8: language
                "'PUBLISHED' INTEGER NOT NULL ," + // 9: published
                "'ARCHIVED' INTEGER," + // 10: archived
                "'LAST_READ' INTEGER," + // 11: lastRead
                "'LAST_UPDATED' INTEGER);"); // 12: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getArticleUrl());
 
        String parentUrl = entity.getParentUrl();
        if (parentUrl != null) {
            stmt.bindString(3, parentUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
        stmt.bindString(5, entity.getTitle());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
        stmt.bindString(7, entity.getExcerpt());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(9, language);
        }
        stmt.bindLong(10, entity.getPublished().getTime());
 
        java.util.Date archived = entity.getArchived();
        if (archived != null) {
            stmt.bindLong(11, archived.getTime());
        }
 
        java.util.Date lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindLong(12, lastRead.getTime());
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(13, lastUpdated.getTime());
        }
    }

    @Override
    protected void attachEntity(Article entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // articleUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.getString(offset + 6), // excerpt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // language
            new java.util.Date(cursor.getLong(offset + 9)), // published
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // archived
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // lastRead
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)) // lastUpdated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleUrl(cursor.getString(offset + 1));
        entity.setParentUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExcerpt(cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLanguage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPublished(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setArchived(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setLastRead(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setLastUpdated(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
