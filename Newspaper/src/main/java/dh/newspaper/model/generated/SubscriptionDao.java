package dh.newspaper.model.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dh.newspaper.model.generated.Subscription;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUBSCRIPTION.
*/
public class SubscriptionDao extends AbstractDao<Subscription, Long> {

    public static final String TABLENAME = "SUBSCRIPTION";

    /**
     * Properties of entity Subscription.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FeedsUrl = new Property(1, String.class, "feedsUrl", false, "FEEDS_URL");
        public final static Property Tags = new Property(2, String.class, "tags", false, "TAGS");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Language = new Property(4, String.class, "language", false, "LANGUAGE");
        public final static Property Enable = new Property(5, Boolean.class, "enable", false, "ENABLE");
        public final static Property Encoding = new Property(6, String.class, "encoding", false, "ENCODING");
        public final static Property PublishedDateString = new Property(7, String.class, "publishedDateString", false, "PUBLISHED_DATE_STRING");
        public final static Property LastUpdate = new Property(8, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
    };


    public SubscriptionDao(DaoConfig config) {
        super(config);
    }
    
    public SubscriptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUBSCRIPTION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FEEDS_URL' TEXT NOT NULL UNIQUE ," + // 1: feedsUrl
                "'TAGS' TEXT," + // 2: tags
                "'DESCRIPTION' TEXT NOT NULL ," + // 3: description
                "'LANGUAGE' TEXT," + // 4: language
                "'ENABLE' INTEGER," + // 5: enable
                "'ENCODING' TEXT," + // 6: encoding
                "'PUBLISHED_DATE_STRING' TEXT," + // 7: publishedDateString
                "'LAST_UPDATE' INTEGER);"); // 8: lastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUBSCRIPTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Subscription entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFeedsUrl());
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(3, tags);
        }
        stmt.bindString(4, entity.getDescription());
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(5, language);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(6, enable ? 1l: 0l);
        }
 
        String encoding = entity.getEncoding();
        if (encoding != null) {
            stmt.bindString(7, encoding);
        }
 
        String publishedDateString = entity.getPublishedDateString();
        if (publishedDateString != null) {
            stmt.bindString(8, publishedDateString);
        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(9, lastUpdate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Subscription readEntity(Cursor cursor, int offset) {
        Subscription entity = new Subscription( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // feedsUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tags
            cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // language
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // enable
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // encoding
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // publishedDateString
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // lastUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Subscription entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFeedsUrl(cursor.getString(offset + 1));
        entity.setTags(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.getString(offset + 3));
        entity.setLanguage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnable(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setEncoding(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublishedDateString(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastUpdate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Subscription entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Subscription entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
